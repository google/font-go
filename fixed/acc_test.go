// Copyright 2016 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"fmt"
	"image"
	"image/png"
	"io/ioutil"
	"math"
	"os"
	"path"
	"testing"
)

func TestAccumulateSIMDUnaligned(t *testing.T) {
	if !haveAccumulateSIMD {
		t.Skip("No accumulateSIMD implemention")
	}

	dst := make([]uint8, 64)
	src := make([]int2ϕ, 64)

	for d := 0; d < 16; d++ {
		for s := 0; s < 16; s++ {
			accumulateSIMD(dst[d:d+32], src[s:s+32])
		}
	}
}

func TestAccumulateSIMDShortDst(t *testing.T) {
	if !haveAccumulateSIMD {
		t.Skip("No accumulateSIMD implemention")
	}

	const oneQuarter = 1 << (2*ϕ - 2)
	dst := make([]uint8, 4)
	src := []int2ϕ{oneQuarter, oneQuarter, oneQuarter, oneQuarter}
	accumulateSIMD(dst[:0], src)
	for i, got := range dst {
		if got != 0 {
			t.Errorf("i=%d: got %#02x, want %#02x", i, got, 0)
		}
	}
}

func TestAccumulate(t *testing.T)              { testAccumulate(t, sequence, sequenceAcc, false) }
func TestAccumulateSIMD(t *testing.T)          { testAccumulate(t, sequence, sequenceAcc, true) }
func TestAccumulateRobotoG16(t *testing.T)     { testAccumulate(t, robotoG16, robotoG16Acc, false) }
func TestAccumulateSIMDRobotoG16(t *testing.T) { testAccumulate(t, robotoG16, robotoG16Acc, true) }

func BenchmarkAccumulate16(b *testing.B)      { benchAccumulate(b, robotoG16, false) }
func BenchmarkAccumulateSIMD16(b *testing.B)  { benchAccumulate(b, robotoG16, true) }
func BenchmarkAccumulate100(b *testing.B)     { benchAccumulate(b, robotoG100, false) }
func BenchmarkAccumulateSIMD100(b *testing.B) { benchAccumulate(b, robotoG100, true) }

func testAccumulate(t *testing.T, src []int2ϕ, want []byte, simd bool) {
	if simd && !haveAccumulateSIMD {
		t.Skip("No accumulateSIMD implemention")
	}

	for _, n := range []int{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
		13, 14, 15, 16, 17, 41, 58, 79, 96, len(src)} {

		if n > len(src) {
			continue
		}
		got := make([]byte, n)
		if simd {
			accumulateSIMD(got, src[:n])
		} else {
			accumulate(got, src[:n])
		}

	loop:
		for i := range got {
			g := got[i]
			w := want[i]
			if g != w {
				t.Errorf("n=%d, i=%d: got %#02x, want %#02x", n, i, g, w)
				break loop
			}
		}
	}
}

func benchAccumulate(b *testing.B, src []int2ϕ, simd bool) {
	if simd && !haveAccumulateSIMD {
		b.Skip("No accumulateSIMD implemention")
	}

	dst := make([]byte, len(src))
	acc := accumulate
	if simd {
		acc = accumulateSIMD
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		acc(dst, src)
	}
}

func pointOnCircle(center, radius, index, number int) point {
	c := float64(center)
	r := float64(radius)
	i := float64(index)
	n := float64(number)
	return point{
		x: float32(c + r*(math.Cos(2*math.Pi*i/n))),
		y: float32(c + r*(math.Sin(2*math.Pi*i/n))),
	}
}

func encodePNG(dstFilename string, src image.Image) error {
	f, err := os.Create(dstFilename)
	if err != nil {
		return err
	}
	err = png.Encode(f, src)
	if err != nil {
		f.Close()
		return err
	}
	return f.Close()
}

func TestRasterizeOutOfBounds(t *testing.T) {
	// Set this to a non-empty string such as "/tmp" to manually inspect the
	// rasterization.
	//
	// If empty, this test simply checks that calling lineTo with points out of
	// bounds of the rasterizer's (0, 0) to (width, height) rectangle doesn't
	// panic.
	const tmpDirForManualInspection = ""

	const center, radius, n = 16, 20, 16
	z := newRasterizer(2*center, 2*center)
	for i := 0; i < n; i++ {
		for j := 1; j < n/2; j++ {
			z.reset()
			z.moveTo(point{1 * center, 1 * center})
			z.lineTo(pointOnCircle(center, radius, i+0, n))
			z.lineTo(pointOnCircle(center, radius, i+j, n))
			z.closePath()

			z.moveTo(point{0 * center, 0 * center})
			z.lineTo(point{0 * center, 2 * center})
			z.lineTo(point{2 * center, 2 * center})
			z.lineTo(point{2 * center, 0 * center})
			z.closePath()

			dst := image.NewAlpha(z.Bounds())
			if haveAccumulateSIMD {
				accumulateSIMD(dst.Pix, z.a)
			} else {
				accumulate(dst.Pix, z.a)
			}

			if tmpDirForManualInspection == "" {
				continue
			}

			filename := path.Join(tmpDirForManualInspection, fmt.Sprintf("out-%02d-%02d.png", i, j))
			if err := encodePNG(filename, dst); err != nil {
				t.Error(err)
			}
			t.Logf("wrote %s", filename)
		}
	}
}

func TestRasterizePolygon(t *testing.T) {
	for radius := 4; radius <= 1024; radius *= 2 {
		z := newRasterizer(2*radius, 2*radius)
		for n := 3; n <= 17; n++ {
			z.reset()
			z.moveTo(point{
				x: float32(2 * radius),
				y: float32(1 * radius),
			})
			for i := 1; i < n; i++ {
				z.lineTo(pointOnCircle(radius, radius, i, n))
			}
			z.closePath()

			dst := image.NewAlpha(z.Bounds())
			if haveAccumulateSIMD {
				accumulateSIMD(dst.Pix, z.a)
			} else {
				accumulate(dst.Pix, z.a)
			}

			corners := [4]uint8{
				dst.Pix[(0*radius+0)*dst.Stride+(0*radius+0)],
				dst.Pix[(0*radius+0)*dst.Stride+(2*radius-1)],
				dst.Pix[(2*radius-1)*dst.Stride+(0*radius+0)],
				dst.Pix[(2*radius-1)*dst.Stride+(2*radius-1)],
			}
			if corners != [4]uint8{} {
				t.Errorf("radius=%d, n=%d: corners were not all zero: %v", radius, n, corners)
				continue
			}
			center := dst.Pix[radius*dst.Stride+radius]
			if center < 0xfe { // TODO: can we tighten this to 0xff?
				t.Errorf("radius=%d, n=%d: center: got %#02x, want >= 0xfe", radius, n, center)
				continue
			}
		}
	}
}

func BenchmarkRasterize16(b *testing.B)  { benchRasterize(b, 16) }
func BenchmarkRasterize32(b *testing.B)  { benchRasterize(b, 32) }
func BenchmarkRasterize64(b *testing.B)  { benchRasterize(b, 64) }
func BenchmarkRasterize100(b *testing.B) { benchRasterize(b, 100) }
func BenchmarkRasterize150(b *testing.B) { benchRasterize(b, 150) }
func BenchmarkRasterize200(b *testing.B) { benchRasterize(b, 200) }

func benchRasterize(b *testing.B, ppem float32) {
	fontData, err := ioutil.ReadFile(*fontFlag)
	if err != nil {
		b.Fatal(err)
	}
	f, err := parse(fontData)
	if err != nil {
		b.Fatal(err)
	}

	data := f.glyphData(uint16(*glyphIDFlag))
	dx, dy, transform := data.glyphSizeAndTransform(f.scale(ppem))
	z := newRasterizer(dx, dy)
	dst := image.NewAlpha(z.Bounds())

	acc := accumulate
	if haveAccumulateSIMD {
		acc = accumulateSIMD
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		z.reset()
		z.rasterize(f, data, transform)
		acc(dst.Pix, z.a)
	}
}

// sequenceAcc is the accumulation of sequence.
var sequenceAcc = []uint8{
	0x20,
	0x60,
	0x20,
	0x40,
	0x60,
	0x60,
	0xa0,
	0xff,
	0xe0,
	0x00,
	0x40,
}

var sequence = []int2ϕ{
	+0x020000, // +0.125, // Running sum: +0.125
	-0x080000, // -0.500, // Running sum: -0.375
	+0x040000, // +0.250, // Running sum: -0.125
	+0x060000, // +0.375, // Running sum: +0.250
	+0x020000, // +0.125, // Running sum: +0.375
	+0x000000, // +0.000, // Running sum: +0.375
	-0x100000, // -1.000, // Running sum: -0.625
	-0x080000, // -0.500, // Running sum: -1.125
	+0x040000, // +0.250, // Running sum: -0.875
	+0x0e0000, // +0.875, // Running sum: +0.000
	+0x040000, // +0.250, // Running sum: +0.250
}

// robotoG16Acc is the accumulation of roboto16.
var robotoG16Acc = []uint8{
	0x00, 0x00, 0x27, 0x7b, 0x86, 0x3f, 0x33, 0x67,
	0x00, 0x3e, 0xf3, 0xde, 0xad, 0xe5, 0xd8, 0xe3,
	0x00, 0xcd, 0xcc, 0x0a, 0x00, 0x0e, 0xd2, 0xe3,
	0x18, 0xff, 0x61, 0x00, 0x00, 0x00, 0x8f, 0xe3,
	0x36, 0xff, 0x3e, 0x00, 0x00, 0x00, 0x8f, 0xe3,
	0x26, 0xff, 0x46, 0x00, 0x00, 0x00, 0x8f, 0xe3,
	0x08, 0xf5, 0x83, 0x00, 0x00, 0x00, 0x9b, 0xe3,
	0x00, 0x8e, 0xf4, 0x5a, 0x22, 0x6a, 0xfc, 0xe3,
	0x00, 0x08, 0xa4, 0xfc, 0xff, 0xcb, 0xb3, 0xe3,
	0x00, 0x00, 0x00, 0x0b, 0x13, 0x00, 0xa9, 0xc6,
	0x00, 0x7b, 0x86, 0x09, 0x00, 0x3e, 0xf8, 0x7a,
	0x00, 0x2c, 0xda, 0xfa, 0xe8, 0xff, 0xa3, 0x05,
	0x00, 0x00, 0x01, 0x27, 0x47, 0x20, 0x00, 0x00,
}

// robotoG16 is the to-be-accumulated 'g' from Roboto-Regular.ttf at 16 ppem.
var robotoG16 = []int2ϕ{
	0, 0, -163445, -343558, -44152, 291144, 47964, -211120,
	423168, -255117, -742902, 88511, 197600, -226914, 50341, -45406,
	931476, -839830, 4653, 796141, 41449, -58858, -801554, -73474,
	834560, -949248, 648586, 399990, 0, 0, -589824, -344064,
	711776, -826464, 792896, 255680, 0, 0, -589824, -344064,
	774144, -888832, 760832, 287744, 0, 0, -589824, -344064,
	900840, -972801, 467083, 538768, 0, 0, -634944, -298944,
	933888, -584384, -415690, 631160, 229441, -295491, -597985, 99062,
	933888, -36343, -637058, -359357, -15010, 213435, 98349, -194368,
	930352, 0, 0, -46641, -33116, 79759, -695192, -116840,
	812032, -505584, -44893, 512180, 38294, -255647, -761845, 517585,
	499908, -180397, -713765, -131057, 74669, -94611, 373958, 648464,
	22739, 0, -4501, -155450, -132898, 159852, 132996, 0,
}

// robotoG100 is the to-be-accumulated 'g' from Roboto-Regular.ttf at 100 ppem.
var robotoG100 = []int2ϕ{
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -170784, -245533, -107185, -106801, -106801, -84852, 68527, 98079, 98079, 98079, 191575, 251857, 15758, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -148365, -356025, -357437, -186656, -90, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79798, 317164, 332915, 291909, 26788, 0, 0, 0, 0, 0, -843480, -28968, 0, 0, 0, 0, 0, 0, 596400,
	276048, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -81272, -586461, -379187, -1654, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154063, 608352, 286159, 0, 0, 0, -35900, -1012614, -60, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, 0, 0, -771, -368269, -592347, -87188, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 921, 352972, 584601, 110080, 0, -113664, -934912, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, 0, -19870, -675043, -353662, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79375, 774575, 194625, -191488, -857088, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, -13572, -680438, -354564, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81278, 776451, -78466, -779264, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, -8473, -655821, -384281, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83722, 430570, -514294, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, -591951, -456625, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19584, 93832, -55230, -58186, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 644, -644, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, -251609, -791628, -5337, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 86962, 348250, 351481, 165061, 88297, 8521, -128, -69342, -127488, -144017, -369725, -322303, -15568, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, -26874, -853002, -168698, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49595, 563689, 417648, 17640, 0, 0, 0, 0, 0, 0, 0, 0, 0, -119028, -425842, -451345, -52359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, -519168, -529408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 245239, 666689, 136647, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -184439, -730384, -133751, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, -124754, -893621, -30200, 0, 0, 0, 0, 0, 0, 0, 0, 226448, 776414, 45712, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -86205, -710789, -251581, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, -529408, -519168, 0, 0, 0, 0, 0, 0, 0, 0, 164071, 803616, 80887, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28004, -816677, -203894, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, -9987, -915449, -123139, 0, 0, 0, 0, 0, 0, 0, 7994, 833931, 206650, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -169111, -840912, -38551, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, -293888, -754688, 0, 0, 0, 0, 0, 0, 0, 0, 393216, 655360, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -441344, -607232, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, -700416, -348160, 0, 0, 0, 0, 0, 0, 0, 43804, 895757, 109014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3479, -864091, -181005, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -15660, -991638, -41276, 0, 0, 0, 0, 0, 0, 0, 374784, 673792, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -189440, -859136, 0, 0, 0, 0, 0, 0, 0, 0, 722944, 325632, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -403456, -645120, 0, 0, 0, 0, 0, 0, 0, 55512, 960078, 32984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -617472, -431104, 0, 0, 0, 0, 0, 0, 0, 334976, 713600, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -831488, -217088, 0, 0, 0, 0, 0, 0, 0, 522240, 526336, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -1009074, -39502, 0, 0, 0, 0, 0, 0, 0, 699392, 349184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	301048, -1017839, -8, 0, 0, 0, 0, 0, 0, 0, 876544, 172032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	237568, -954368, 0, 0, 0, 0, 0, 0, 0, 7072, 1021755, 19747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	174080, -890880, 0, 0, 0, 0, 0, 0, 0, 52224, 996352, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	110592, -827392, 0, 0, 0, 0, 0, 0, 0, 103424, 945152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	47104, -763904, 0, 0, 0, 0, 0, 0, 0, 154624, 893952, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	26884, -743684, 0, 0, 0, 0, 0, 0, 0, 205824, 842752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	87040, -803840, 0, 0, 0, 0, 0, 0, 0, 221070, 827506, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	148480, -865280, 0, 0, 0, 0, 0, 0, 0, 166912, 881664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	209920, -926720, 0, 0, 0, 0, 0, 0, 0, 110592, 937984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	271360, -988160, 0, 0, 0, 0, 0, 0, 0, 54272, 994304, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	324600, -1033198, -8200, 0, 0, 0, 0, 0, 0, 5708, 1009229, 33637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -945236, -103340, 0, 0, 0, 0, 0, 0, 0, 839680, 208896, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -742400, -306176, 0, 0, 0, 0, 0, 0, 0, 648192, 400384, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -535552, -513024, 0, 0, 0, 0, 0, 0, 0, 456704, 591872, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -328704, -719872, 0, 0, 0, 0, 0, 0, 0, 200304, 848272, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -121856, -926720, 0, 0, 0, 0, 0, 0, 0, 463, 882785, 165327, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, -823, -951101, -96651, 0, 0, 0, 0, 0, 0, 0, 517120, 531456, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, -598016, -450560, 0, 0, 0, 0, 0, 0, 0, 134333, 889900, 24341, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3854, -867490, -177230, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, -202752, -845824, 0, 0, 0, 0, 0, 0, 0, 0, 577536, 471040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -427008, -621568, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, -33, -855997, -192545, 0, 0, 0, 0, 0, 0, 0, 63585, 897340, 87649, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -134855, -862320, -51399, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, -460800, -587776, 0, 0, 0, 0, 0, 0, 0, 0, 325494, 710765, 12315, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -7055, -775793, -265727, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, -83202, -906116, -59256, 0, 0, 0, 0, 0, 0, 0, 0, 424702, 622595, 1278, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -38528, -663296, -346752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, -449536, -599040, 0, 0, 0, 0, 0, 0, 0, 0, 0, 456019, 564747, 27809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -98386, -727899, -222290, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, -12496, -827999, -208080, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181510, 656882, 210182, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33536, -362581, -529117, -123340, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, -218066, -820315, -10194, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12729, 269264, 365305, 335595, 65681, 0, 0, 0, 0, -37111, -140960, -374001, -412824, -83676, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, -567154, -481422, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6312, 84251, 107459, 95867, -72276, -127562, -90460, -3591, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, -6516, -653590, -388468, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1781, 38716, -40499, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, -14751, -694465, -339359, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9724, 610823, -374788, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, 0, -26327, -713465, -308783, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24043, 667177, 357355, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, 0, 0, -7045, -438379, -555672, -47478, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 135555, 634997, 278023, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 716800,
	331776, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -137511, -640945, -270119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 58080, 501276, 458022, 31196, 0, 0, -802816, -245760, 0, 0, 0, 0, 0, 0, 0, 719836,
	328740, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4785, -276040, -369961, -336434, -61354, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3386, 198270, 315666, 438967, 92283, 0, 0, 0, 0, -830566, -218010, 0, 0, 0, 0, 0, 0, 0, 779264,
	269312, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -33198, -308273, -245031, -110895, -110851, -110851, -79363, 72315, 92263, 92263, 93833, 226528, 308071, 113187, 0, 0, 0, 0, 0, 0, 0, -928768, -119808, 0, 0, 0, 0, 0, 0, 0, 861184,
	187392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5575, -1020016, -22983, 0, 0, 0, 0, 0, 0, 0, 943104,
	105472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -84992, -963584, 0, 0, 0, 0, 0, 0, 0, 1849, 1021324,
	25401, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -234526, -814050, 0, 0, 0, 0, 0, 0, 0, 75810, 972766,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -582656, -465920, 0, 0, 0, 0, 0, 0, 0, 320512, 728064,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10489, -930828, -107257, 0, 0, 0, 0, 0, 0, 0, 596992, 451584,
	0, 0, 0, 0, 0, 0, 0, -209583, -123809, 333393, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -275104, -773472, 0, 0, 0, 0, 0, 0, 0, 0, 873472, 175104,
	0, 0, 0, 0, 0, 0, -124019, -821529, -80016, 707641, 317923, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -28842, -818858, -200874, 0, 0, 0, 0, 0, 0, 0, 105250, 940864, 2460,
	0, 0, 0, 0, 0, -60731, -805768, -182075, 0, 28516, 721207, 298852, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -591872, -456704, 0, 0, 0, 0, 0, 0, 0, 0, 531456, 517120, 0,
	0, 0, 0, 0, -19800, -745295, -283480, 0, 0, 0, 34668, 629949, 383128, 827, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -337168, -707745, -3662, 0, 0, 0, 0, 0, 0, 0, 71800, 916239, 60536, 0,
	0, 0, 0, -1224, -640111, -407240, 0, 0, 0, 0, 0, 0, 313976, 625934, 108664, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -12964, -517777, -507119, -10714, 0, 0, 0, 0, 0, 0, 0, 0, 539648, 508928, 0, 0,
	0, 0, 0, -404636, -643940, 0, 0, 0, 0, 0, 0, 0, 0, 67315, 548213, 379591, 53453, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -146372, -642262, -259941, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95226, 896561, 56787, 0, 0,
	0, 0, 0, -76818, -822747, -149010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41921, 326565, 379990, 282615, 17483, 0, 0, 0, 0, 0, 0, -71882, -350727, -378611, -242904, -4450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25993, 776428, 246153, 0, 0, 0,
	0, 0, 0, 0, -163658, -818026, -66890, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19273, 105995, 116508, 116508, 56900, -98165, -106188, -106188, -92897, -11747, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 442, 643211, 404922, 0, 0, 0, 0,
	0, 0, 0, 0, 0, -246261, -716003, -86311, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 462866, 585710, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, -125636, -716407, -206532, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12692, 542483, 489244, 4155, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, -37551, -578711, -417652, -14659, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 83976, 685551, 279048, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, -170829, -556480, -320150, -1115, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5437, 322682, 597193, 123261, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -244159, -433746, -330219, -40450, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11801, 350920, 501284, 184570, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -57085, -346818, -357662, -230713, -56295, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38859, 239038, 267450, 349221, 154005, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -10223, -172691, -228979, -170313, -76454, -75226, -74437, 16987, 79577, 79577, 79577, 84387, 211219, 228591, 28411, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
}
